version: 2.1
jobs:
  build:
    resource_class: large
    machine:
      image: ubuntu-1604:202007-01
    working_directory: ~/app

  ruby-linters:
    resource_class: small
    docker:
      - image: docker/compose:alpine-1.25.4
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_PASSWORD
    environment:
      COMPOSE_FILES: -f docker-compose.yml -f .circleci/docker-compose.yml
    working_directory: /tmp/workspace

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - setup_remote_docker

      - run:
          name: Load archived Docker image
          command: |
            docker load -i image.tar

      - run:
          name: Run rubocop
          command: |
            FILES_TO_CHECK=$(cat ruby_files_to_check.txt)
            if [ -s changed_configuration_files.txt ]; then
              echo "Full rubocop check"
              docker-compose $(echo $COMPOSE_FILES) run --no-deps app bin/rubocop --parallel
            elif [ -n "$FILES_TO_CHECK" ]; then
              echo "Partial rubocop check"
              docker-compose $(echo $COMPOSE_FILES) run --no-deps app bin/rubocop --parallel --force-exclusion $FILES_TO_CHECK
            fi

      - run:
          name: Run brakeman
          when: always
          command: |
            docker-compose $(echo $COMPOSE_FILES) run --no-deps app bundle exec brakeman --no-pager

      - run:
          name: Run bundle audit
          when: always
          command: |
            IGNORE_LIST="CVE-2015-9284 CVE-2016-7103"
            AUDIT_COMMAND="bundle exec bundle-audit update && bundle exec bundle-audit --ignore $IGNORE_LIST"
            docker-compose $(echo $COMPOSE_FILES) run --no-deps app /bin/bash -c "$AUDIT_COMMAND"

  js-linters:
    resource_class: small
    docker:
      - image: docker/compose:alpine-1.25.4
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_PASSWORD
    environment:
      COMPOSE_FILES: -f docker-compose.yml -f .circleci/docker-compose.yml
    working_directory: /tmp/workspace

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - setup_remote_docker

      - run:
          name: Load archived Docker image
          command: |
            FILES_TO_CHECK=$(cat js_files_to_check.txt)
            if [ -n "$FILES_TO_CHECK" ] || [ -s changed_configuration_files.txt ]; then
              docker load -i image.tar
            fi

      - run:
          name: Run eslint
          no_output_timeout: 20m
          command: |
            FILES_TO_CHECK=$(cat js_files_to_check.txt)
            if [ -s changed_configuration_files.txt ]; then
              echo "Full eslint check"
              docker-compose $(echo $COMPOSE_FILES) run app bin/rails db:create db:test:prepare
              docker-compose $(echo $COMPOSE_FILES) run app yarn eslint:all
            elif [ -n "$FILES_TO_CHECK" ]; then
              echo "Partial eslint check"
              docker-compose $(echo $COMPOSE_FILES) run app bin/rails db:create db:test:prepare
              docker-compose $(echo $COMPOSE_FILES) run app /bin/bash -c "bin/rake graphql:schema:generate && yarn eslint --report-unused-disable-directives $FILES_TO_CHECK"
            fi

      - run:
          name: Run prettier
          when: always
          command: |
            FILES_TO_CHECK=$(cat js_files_to_check.txt)
            if [ -s changed_configuration_files.txt ]; then
              echo "Full prettier check"
              docker-compose $(echo $COMPOSE_FILES) run --no-deps app yarn prettier:all
            elif [ -n "$FILES_TO_CHECK" ]; then
              echo "Partial prettier check"
              docker-compose $(echo $COMPOSE_FILES) run --no-deps app yarn prettier -c $FILES_TO_CHECK
            fi

      - run:
          name: Run flow
          when: always
          command: |
            FILES_TO_CHECK=$(cat js_files_to_check.txt)
            if [ -s changed_configuration_files.txt ]; then
              echo "Full flow check"
              docker-compose $(echo $COMPOSE_FILES) run app /bin/bash -c "bin/rake graphql:schema:generate && yarn flow:ci"
            elif [ -n "$FILES_TO_CHECK" ]; then
              echo "Partial flow check"
              docker-compose $(echo $COMPOSE_FILES) run app /bin/bash -c "bin/rake graphql:schema:generate && yarn flow:ci:focused $FILES_TO_CHECK"
            fi

  ruby-tests:
    resource_class: small
    parallelism: 8
    docker:
      - image: docker/compose:alpine-1.25.4
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_PASSWORD
    environment:
      COMPOSE_FILES: -f docker-compose.yml -f .circleci/docker-compose.yml
    working_directory: /tmp/workspace

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - setup_remote_docker

      - run:
          name: Load archived Docker image
          command: |
            docker load -i image.tar

      - run:
          name: Prepare database
          command: |
            docker-compose $(echo $COMPOSE_FILES) run app bin/rails db:create db:test:prepare

      - run:
          name: Run tests
          command: |
            TESTFILES=$(cat ruby_test_files.txt | circleci tests split --split-by=timings --timings-type=filename)
            echo "TESTFILES:"
            echo "${TESTFILES}"
            docker-compose $(echo $COMPOSE_FILES) run --name app_container app \
                                                   bundle exec rspec \
                                                   --profile 10 \
                                                   --format RspecJunitFormatter \
                                                   --out tmp/reports/rspec.xml \
                                                   --format documentation \
                                                   ${TESTFILES}

      - run:
          name: Copy test artifacts
          when: always
          command: |
            docker cp app_container:/app/tmp/reports reports
            docker cp app_container:/app/log log
            docker cp app_container:/app/tmp/floorplans floorplans || true
            docker cp app_container:/app/tmp/screenshots screenshots || true

      - store_test_results:
          path: reports

      - store_artifacts:
          path: floorplans

      - store_artifacts:
          path: log

      - store_artifacts:
          path: screenshots

  system-tests:
    resource_class: large
    machine:
      image: ubuntu-1604:202007-01
    parallelism: 8
    environment:
      COMPOSE_FILES: -f docker-compose.yml -f .circleci/docker-compose.yml
    working_directory: /tmp/workspace

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Load archived Docker image
          command: |
            docker load -i image.tar

      - run:
          name: Prepare database
          command: |
            docker-compose $(echo $COMPOSE_FILES) run app bin/rails db:create db:test:prepare

      - run:
          name: Memory usage check
          command: |
            while true; do
              sleep 5
              ps auxwwf
              echo "======"
            done
          background: true

      - run:
          name: Run tests
          command: |
            TESTFILES=$(cat system_test_files.txt | circleci tests split --split-by=timings --timings-type=filename)
            echo "TESTFILES:"
            echo "${TESTFILES}"
            docker-compose $(echo $COMPOSE_FILES) run --name app_container app \
                                                   bundle exec rspec \
                                                   --profile 10 \
                                                   --format RspecJunitFormatter \
                                                   --out tmp/reports/rspec.xml \
                                                   --format documentation \
                                                   ${TESTFILES}

      - run:
          name: Max memory usage in bytes
          command: cat /sys/fs/cgroup/memory/memory.max_usage_in_bytes
          when: always

      - run:
          name: Copy test artifacts
          when: always
          command: |
            docker cp app_container:/app/tmp/reports reports
            docker cp app_container:/app/log log
            docker cp app_container:/app/tmp/floorplans floorplans || true
            docker cp app_container:/app/tmp/screenshots screenshots || true

      - store_test_results:
          path: reports

      - store_artifacts:
          path: floorplans

      - store_artifacts:
          path: screenshots

      - store_artifacts:
          path: log

  js-tests:
    resource_class: medium
    docker:
      - image: docker/compose:alpine-1.25.4
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_PASSWORD
    environment:
      COMPOSE_FILES: -f docker-compose.yml -f .circleci/docker-compose.yml
    working_directory: /tmp/workspace

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - setup_remote_docker

      - run:
          name: Load archived Docker image
          command: |
            docker load -i image.tar

      - run:
          name: Run jest tests
          command: |
            docker-compose $(echo $COMPOSE_FILES) run app bin/rails db:create db:test:prepare
            docker-compose $(echo $COMPOSE_FILES) run app yarn test:jest:ci

  deploy:
    resource_class: medium
    machine:
      image: ubuntu-1604:202007-01
    environment:
      COMPOSE_FILES: -f docker-compose.yml -f .circleci/docker-compose.yml
    working_directory: /tmp/workspace

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Load archived Docker image
          command: |
            docker load -i image.tar

      - add_ssh_keys:
          fingerprints:
            - '9c:b2:e4:a4:07:33:d0:d5:4b:fa:23:e1:e4:03:a4:2b'

      - run:
          name: Set HOSTS environment variable
          command: |
            echo "export HOSTS=(
              main.ossd.co
              utah.ossd.co
              omaha.ossd.co
              juno.ossd.co
            )" >> $BASH_ENV

      - run:
          name: Prepare ssh keys for container
          command: |
            for HOST in "${HOSTS[@]}"; do
              echo "export HOST='${HOST}'" >> $BASH_ENV
              ssh-keyscan -t rsa -H $HOST >> ~/.ssh/known_hosts
            done
            cp -R ~/.ssh .ssh
            sed -i 's/\/home\/circleci/\~/g' .ssh/config
            echo "  ForwardAgent yes" >> .ssh/config
            sudo chown -R root:root .ssh/

      - run:
          name: Deploy to staging servers
          command: |
            for HOST in "${HOSTS[@]}"; do
              echo "export HOST='${HOST}'" >> $BASH_ENV
              docker-compose $(echo $COMPOSE_FILES) run \
                --no-deps \
                -e HOST=$HOST \
                -e BRANCH=$CIRCLE_BRANCH \
                -e no_compile=1 \
                app bin/mina full_deploy
            done

      - slack/status:
          fail_only: true
          failure_message: |
            ':red_circle: Ouch! A deployment to $HOST has failed! $CIRCLE_USERNAME, please take a look.'

orbs:
  slack: circleci/slack@3.4.2
workflows:
  version: 2
  build-lint-test-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - ruby-linters:
          requires:
            - build
          filters:
            branches:
              ignore:
                - main
      - js-linters:
          requires:
            - build
          filters:
            branches:
              ignore:
                - main
      - ruby-tests:
          requires:
            - build
      - system-tests:
          requires:
            - build
      - js-tests:
          requires:
            - build
      - deploy:
          requires:
            - build
            - ruby-tests
            - system-tests
            - js-tests
          filters:
            branches:
              only:
                - main
